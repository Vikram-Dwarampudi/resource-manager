================================================================================
                    VIEWING KUBERNETES LOGS IN DOCKER DESKTOP
================================================================================

üìã HOW TO SEE KUBERNETES LOGS OF ANGULAR APPLICATION ACTIONS IN DOCKER DESKTOP

================================================================================
üñ•Ô∏è  DOCKER DESKTOP GUI METHOD
================================================================================

1. OPEN DOCKER DESKTOP:
   - Launch Docker Desktop application
   - Go to "Containers" tab

2. FIND MINIKUBE CONTAINER:
   - Look for container named "minikube"
   - Container ID: f345fb8d95ae
   - Status: Running

3. ACCESS CONTAINER LOGS:
   - Click on "minikube" container
   - Click "Logs" tab
   - You'll see system-level logs

4. ACCESS APPLICATION POD LOGS:
   - In Docker Desktop, go to "Containers" 
   - Look for containers with names like:
     * kubernetes-resource-manager-backend-*
     * Or any container running your Flask app
   - Click on the container and view "Logs" tab

================================================================================
üíª COMMAND LINE METHOD (RECOMMENDED)
================================================================================

5. VIEW MINIKUBE SYSTEM LOGS:
   # View minikube container logs
   docker logs minikube
   
   # View last 20 lines
   docker logs minikube --tail=20
   
   # Follow logs in real-time
   docker logs -f minikube

6. VIEW APPLICATION POD LOGS (KUBERNETES):
   # Get the pod name first
   kubectl get pods
   
   # View application logs (this shows your Flask app logs)
   kubectl logs kubernetes-resource-manager-backend-76d479b5d9-d869z
   
   # Follow logs in real-time
   kubectl logs -f kubernetes-resource-manager-backend-76d479b5d9-d869z
   
   # View last 50 lines
   kubectl logs kubernetes-resource-manager-backend-76d479b5d9-d869z --tail=50

================================================================================
üéØ SPECIFIC LOGS FOR ANGULAR ACTIONS
================================================================================

7. MONITOR ANGULAR APPLICATION ACTIONS:
   # Watch for POST requests (create/update/delete from Angular)
   kubectl logs -f kubernetes-resource-manager-backend-76d479b5d9-d869z | grep "POST"
   
   # Watch for specific Angular actions:
   kubectl logs -f kubernetes-resource-manager-backend-76d479b5d9-d869z | grep "/create"
   kubectl logs -f kubernetes-resource-manager-backend-76d479b5d9-d869z | grep "/delete"
   kubectl logs -f kubernetes-resource-manager-backend-76d479b5d9-d869z | grep "/update"
   
   # Watch for GET requests (Angular fetching data)
   kubectl logs -f kubernetes-resource-manager-backend-76d479b5d9-d869z | grep "GET"

8. MONITOR ERRORS FROM ANGULAR:
   # Watch for 4xx errors (client errors)
   kubectl logs -f kubernetes-resource-manager-backend-76d479b5d9-d869z | grep "4[0-9][0-9]"
   
   # Watch for 5xx errors (server errors)
   kubectl logs -f kubernetes-resource-manager-backend-76d479b5d9-d869z | grep "5[0-9][0-9]"
   
   # Watch for all errors
   kubectl logs -f kubernetes-resource-manager-backend-76d479b5d9-d869z | grep -E "(4[0-9]{2}|5[0-9]{2})"

================================================================================
üîç STEP-BY-STEP LOG MONITORING WORKFLOW
================================================================================

STEP 1: Start monitoring logs
   kubectl logs -f kubernetes-resource-manager-backend-76d479b5d9-d869z

STEP 2: Open your Angular application
   http://localhost:4201

STEP 3: Perform actions in Angular:
   - Create a new pod
   - Delete a pod
   - Update pod resources
   - Refresh the page

STEP 4: Watch the logs for:
   - POST /create - Pod creation
   - POST /delete - Pod deletion
   - POST /update - Pod updates
   - GET /servers - Data fetching
   - GET /consistency-check - Health checks

================================================================================
üìä LOG OUTPUT EXAMPLES FROM ANGULAR ACTIONS
================================================================================

‚úÖ ANGULAR CREATES A POD:
127.0.0.1 - - [19/Jul/2025 16:20:30] "POST /create HTTP/1.1" 200 -

‚úÖ ANGULAR DELETES A POD:
127.0.0.1 - - [19/Jul/2025 16:21:15] "POST /delete HTTP/1.1" 200 -

‚úÖ ANGULAR UPDATES A POD:
127.0.0.1 - - [19/Jul/2025 16:22:20] "POST /update HTTP/1.1" 200 -

‚úÖ ANGULAR FETCHES DATA:
127.0.0.1 - - [19/Jul/2025 16:23:30] "GET /servers HTTP/1.1" 200 -

‚úÖ ANGULAR HEALTH CHECK:
127.0.0.1 - - [19/Jul/2025 16:24:15] "GET /consistency-check HTTP/1.1" 200 -

‚ùå ANGULAR ACTION FAILS:
127.0.0.1 - - [19/Jul/2025 16:25:30] "POST /create HTTP/1.1" 400 -

================================================================================
üñ•Ô∏è  DOCKER DESKTOP SPECIFIC FEATURES
================================================================================

9. DOCKER DESKTOP CONTAINER VIEW:
   - Open Docker Desktop
   - Go to "Containers" tab
   - Find "minikube" container
   - Click on it to see:
     * Logs tab
     * Stats tab
     * Files tab
     * Terminal tab

10. DOCKER DESKTOP LOGS FEATURES:
    - Real-time log streaming
    - Log filtering
    - Log export
    - Timestamp display
    - Color-coded log levels

11. ACCESSING POD CONTAINERS IN DOCKER DESKTOP:
    # List all containers including Kubernetes pods
    docker ps -a
    
    # Find your application container
    docker ps | grep kubernetes-resource-manager-backend
    
    # Access container logs directly
    docker logs <container-id>

================================================================================
üîß USEFUL COMMANDS FOR DOCKER DESKTOP LOG MONITORING
================================================================================

12. QUICK LOG COMMANDS:
    # View all containers
    docker ps -a
    
    # View minikube logs
    docker logs minikube
    
    # View application logs
    kubectl logs kubernetes-resource-manager-backend-76d479b5d9-d869z
    
    # Follow application logs
    kubectl logs -f kubernetes-resource-manager-backend-76d479b5d9-d869z

13. LOG FILTERING COMMANDS:
    # Only POST requests (Angular actions)
    kubectl logs kubernetes-resource-manager-backend-76d479b5d9-d869z | grep "POST"
    
    # Only errors
    kubectl logs kubernetes-resource-manager-backend-76d479b5d9-d869z | grep -E "(4[0-9]{2}|5[0-9]{2})"
    
    # Only from Angular (localhost)
    kubectl logs kubernetes-resource-manager-backend-76d479b5d9-d869z | grep "127.0.0.1"

14. LOG EXPORT COMMANDS:
    # Save logs to file
    kubectl logs kubernetes-resource-manager-backend-76d479b5d9-d869z > angular-actions.log
    
    # Save only POST requests
    kubectl logs kubernetes-resource-manager-backend-76d479b5d9-d869z | grep "POST" > angular-post-actions.log

================================================================================
üì± USEFUL ALIASES FOR DOCKER DESKTOP LOG MONITORING
================================================================================

# Add these to your ~/.bashrc or ~/.zshrc:

alias dlogs='docker logs minikube'
alias dlogsf='docker logs -f minikube'
alias kapplogs='kubectl logs kubernetes-resource-manager-backend-76d479b5d9-d869z'
alias kapplogsf='kubectl logs -f kubernetes-resource-manager-backend-76d479b5d9-d869z'
alias kangular='kubectl logs kubernetes-resource-manager-backend-76d479b5d9-d869z | grep "POST"'
alias kerrors='kubectl logs kubernetes-resource-manager-backend-76d479b5d9-d869z | grep -E "(4[0-9]{2}|5[0-9]{2})"'

================================================================================
üéØ QUICK START FOR ANGULAR LOG MONITORING
================================================================================

1. Open terminal and run:
   kubectl logs -f kubernetes-resource-manager-backend-76d479b5d9-d869z

2. Open your Angular app:
   http://localhost:4201

3. Perform any action (create/delete/update)

4. Watch the terminal for log output

5. You'll see real-time logs of your Angular actions!

================================================================================
‚ö†Ô∏è  TROUBLESHOOTING DOCKER DESKTOP LOGS
================================================================================

1. If logs are not showing in Docker Desktop:
   - Check if container is running
   - Refresh Docker Desktop
   - Check container status

2. If kubectl logs are empty:
   - Verify pod is running: kubectl get pods
   - Check pod status: kubectl describe pod <pod-name>
   - Restart pod if needed

3. If you can't see Angular actions:
   - Verify port-forwarding is active
   - Check if Angular is connected to correct endpoint
   - Verify API calls are reaching the backend

================================================================================
üìÖ LAST UPDATED: July 19, 2025
================================================================================ 